{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Futura-Bold;\f1\fnil\fcharset0 Futura-Medium;\f2\fnil\fcharset0 Futura-MediumItalic;
}
{\colortbl;\red255\green255\blue255;\red33\green33\blue39;\red255\green255\blue255;\red22\green174\blue174;
\red77\green173\blue74;\red77\green173\blue74;\red205\green76\blue92;\red40\green40\blue45;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c17255\c17255\c20392;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c72941\c73725;
\cssrgb\c36078\c72157\c36078;\cssrgb\c36078\c72157\c36078\c4706;\cssrgb\c84706\c38824\c43529;\cssrgb\c20784\c20784\c23137;\cssrgb\c100000\c100000\c100000\c29804;
}
\margl1440\margr1440\vieww16040\viewh23120\viewkind0
\deftab720
\pard\pardeftab720\sl600\sa60\qc\partightenfactor0

\f0\b\fs56 \cf2 \cb3 \expnd0\expndtw0\kerning0
Introduction\cb1 \
\pard\pardeftab720\sl420\sa220\qc\partightenfactor0

\f1\b0\fs32 \cf2 \uc0\u8232 \cb3 Please respect the following rules:\cb1 \uc0\u8232 \u8232 \cb3 - Remain polite, courteous, respectful and constructive throughout\cb1 \uc0\u8232 \cb3 the correction process. The well-being of the community depends on\cb1 \uc0\u8232 \cb3 it.\cb1 \uc0\u8232 \u8232 \cb3 - Identify with the person (or the group) graded the eventual\cb1 \uc0\u8232 \cb3 dysfunctions of the work. Take the time to discuss and debate the\cb1 \uc0\u8232 \cb3 problems you have identified.\cb1 \uc0\u8232 \u8232 \cb3 - You must consider that there might be some difference in how your\cb1 \uc0\u8232 \cb3 peers might have understood the project's instructions and the\cb1 \uc0\u8232 \cb3 scope of its functionalities. Always keep an open mind and grade\cb1 \uc0\u8232 \cb3 him/her as honestly as possible. The pedagogy is valid only and\cb1 \uc0\u8232 \cb3 only if peer-evaluation is conducted seriously.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl600\sa60\qc\partightenfactor0

\f0\b\fs56 \cf2 \cb3 Guidelines\cb1 \
\pard\pardeftab720\sl420\sa220\qc\partightenfactor0

\f1\b0\fs32 \cf2 \uc0\u8232 \cb3 - Only grade the work that is in the student or group's GiT\cb1 \uc0\u8232 \cb3 repository.\cb1 \uc0\u8232 \u8232 \cb3 - Double-check that the GiT repository belongs to the student or the\cb1 \uc0\u8232 \cb3 group. Ensure that the work is for the relevant project and also\cb1 \uc0\u8232 \cb3 check that "git clone" is used in an empty folder.\cb1 \uc0\u8232 \u8232 \cb3 - Check carefully that no malicious aliases was used to fool you and\cb1 \uc0\u8232 \cb3 make you evaluate something other than the content of the official\cb1 \uc0\u8232 \cb3 repository.\cb1 \uc0\u8232 \u8232 \cb3 - To avoid any surprises, carefully check that both the correcting\cb1 \uc0\u8232 \cb3 and the corrected students have reviewed the possible scripts used\cb1 \uc0\u8232 \cb3 to facilitate the grading.\cb1 \uc0\u8232 \u8232 \cb3 - If the correcting student has not completed that particular\cb1 \uc0\u8232 \cb3 project yet, it is mandatory for this student to read the entire\cb1 \uc0\u8232 \cb3 subject prior to starting the defence.\cb1 \uc0\u8232 \u8232 \cb3 - Use the flags available on this scale to signal an empty\cb1 \uc0\u8232 \cb3 repository, non-functioning program, a norm error, cheating etc.\cb1 \uc0\u8232 \cb3 In these cases, the grading is over and the final grade is 0 (or\cb1 \uc0\u8232 \cb3 -42 in case of cheating). However, with the exception of cheating,\cb1 \uc0\u8232 \cb3 you are encouraged to continue to discuss your work (even if you\cb1 \uc0\u8232 \cb3 have not finished it) in order to identify any issues that may\cb1 \uc0\u8232 \cb3 have caused this failure and avoid repeating the same mistake in\cb1 \uc0\u8232 \cb3 the future.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl420\sa440\qc\partightenfactor0
\cf2 \
\pard\pardeftab720\sl600\sa60\qc\partightenfactor0

\f0\b\fs56 \cf2 \cb3 Attachments\cb1 \
\pard\pardeftab720\sl420\qc\partightenfactor0

\f1\b0\fs32 \cf2 \
\pard\pardeftab720\sl440\qc\partightenfactor0

\fs40 \cf2 \cb3 \'a0{\field{\*\fldinst{HYPERLINK "https://cdn.intra.42.fr/pdf/pdf/22876/en.subject.pdf"}}{\fldrslt \cf4 subject.pdf}}
\fs32 \'a0
\fs40 \'a0{\field{\*\fldinst{HYPERLINK "https://projects.intra.42.fr/uploads/document/document/3433/checker_Mac"}}{\fldrslt \cf4 checker_Mac}}
\fs32 \cb1 \
\pard\pardeftab720\sl600\sa60\qc\partightenfactor0

\f0\b\fs56 \cf2 \cb3 Mandatory part\cb1 \
\pard\pardeftab720\sl420\sa220\qc\partightenfactor0

\f2\i\b0\fs32 \cf2 \cb3 Reminder : Remember that for the duration of the defence, no segfault, nor other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. This rule is active thoughout the whole defence.\cb1 \
\pard\pardeftab720\sl440\sa220\qc\partightenfactor0

\f0\i0\b\fs40 \cf2 \cb3 Memory leaks\cb1 \
\pard\pardeftab720\sl420\sa220\qc\partightenfactor0

\f1\b0\fs32 \cf2 \uc0\u8232 \cb3 Throughout the defence, pay attention to the amount of memory\cb1 \uc0\u8232 \cb3 used by push_swap (using the command top for example) in order\cb1 \uc0\u8232 \cb3 to detect any anomalies and ensure that allocated memory is\cb1 \uc0\u8232 \cb3 properly freed. If there is one memory leak (or more), the final\cb1 \uc0\u8232 \cb3 grade is 0.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf5 \cb6 \'a0Yes\
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf3 \cb7 \'a0No\
\pard\pardeftab720\sl440\sa220\qc\partightenfactor0

\f0\b\fs40 \cf2 \cb3 Error management\cb1 \
\pard\pardeftab720\sl420\sa220\qc\partightenfactor0

\f1\b0\fs32 \cf2 \uc0\u8232 \cb3 In this section, we'll evaluate the push_swap's error management.\cb1 \uc0\u8232 \cb3 If at least one fails, no points will be awarded for this\cb1 \uc0\u8232 \cb3 section. Move to the next one.\cb1 \uc0\u8232 \u8232 \cb3 - Run push_swap with non numeric parameters. The program must\cb1 \uc0\u8232 \cb3 display "Error".\cb1 \uc0\u8232 \u8232 \cb3 - Run push_swap with a duplicate numeric parameter. The program\cb1 \uc0\u8232 \cb3 must display "Error".\cb1 \uc0\u8232 \u8232 \cb3 - Run push_swap with only numeric parameters including one greater\cb1 \uc0\u8232 \cb3 than MAXINT. The program must display "Error".\cb1 \uc0\u8232 \u8232 \cb3 - Run push_swap without any parameters. The program must not\cb1 \uc0\u8232 \cb3 display anything and give the prompt back.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf5 \cb6 \'a0Yes\
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf3 \cb7 \'a0No\
\pard\pardeftab720\sl440\sa220\qc\partightenfactor0

\f0\b\fs40 \cf2 \cb3 Push_swap - Identity test\cb1 \
\pard\pardeftab720\sl420\sa220\qc\partightenfactor0

\f1\b0\fs32 \cf2 \uc0\u8232 \cb3 In this section, we'll evaluate push_swap's behavior when given\cb1 \uc0\u8232 \cb3 a list, which has already been sorted. Execute the following 3\cb1 \uc0\u8232 \cb3 tests. If at least one fails, no points will be awarded for this\cb1 \uc0\u8232 \cb3 section. Move to the next one.\cb1 \uc0\u8232 \u8232 \cb3 - Run the following command "$>./push_swap 42". The program\cb1 \uc0\u8232 \cb3 should display nothing (0 instruction).\cb1 \uc0\u8232 \u8232 \cb3 - Run the following command "$>./push_swap 0 1 2 3". The\cb1 \uc0\u8232 \cb3 program should display nothing (0 instruction).\cb1 \uc0\u8232 \u8232 \cb3 - Run the following command "$>./push_swap 0 1 2 3 4 5 6 7 8\cb1 \uc0\u8232 \cb3 9". The program should display nothing (0 instruction).\cb1 \uc0\u8232 \
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf5 \cb6 \'a0Yes\
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf3 \cb7 \'a0No\
\pard\pardeftab720\sl440\sa220\qc\partightenfactor0

\f0\b\fs40 \cf2 \cb3 Push_swap - Simple version\cb1 \
\pard\pardeftab720\sl420\sa220\qc\partightenfactor0

\f1\b0\fs32 \cf2 \uc0\u8232 \cb3 If the following test fails, no points will be awarded for this\cb1 \uc0\u8232 \cb3 section. Move to the next one. Use the checker binary given on the\cb1 \uc0\u8232 \cb3 attachments.\cb1 \uc0\u8232 \u8232 \cb3 - Run "$>ARG="2 1 0"; ./push_swap $ARG | ./checker_OS $ARG".\cb1 \uc0\u8232 \cb3 Check that the checker program displays "OK" and that the\cb1 \uc0\u8232 \cb3 size of the list of instructions from push_swap is 2 OR 3.\cb1 \uc0\u8232 \cb3 Otherwise the test fails.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf5 \cb6 \'a0Yes\
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf3 \cb7 \'a0No\
\pard\pardeftab720\sl440\sa220\qc\partightenfactor0

\f0\b\fs40 \cf2 \cb3 Another simple version\cb1 \
\pard\pardeftab720\sl420\sa220\qc\partightenfactor0

\f1\b0\fs32 \cf2 \uc0\u8232 \cb3 Execute the following 2 tests. If at least one fails, no points\cb1 \uc0\u8232 \cb3 will be awarded for this section. Move to the next one. Use the checker\cb1 \uc0\u8232 \cb3 binary given on the attachments.\cb1 \uc0\u8232 \u8232 \cb3 - Run "$>ARG="1 5 2 4 3"; ./push_swap $ARG | ./checker_OS $ARG".\cb1 \uc0\u8232 \cb3 Check that the checker program displays "OK" and that the\cb1 \uc0\u8232 \cb3 size of the list of instructions from push_swap isn't more\cb1 \uc0\u8232 \cb3 than 12. Kudos if the size of the list of instructions is 8.\cb1 \uc0\u8232 \u8232 \cb3 - Run "$>ARG="<5 random values>"; ./push_swap $ARG | ./checker_OS\cb1 \uc0\u8232 \cb3 $ARG" and replace the placeholder by 5 random valid values.\cb1 \uc0\u8232 \cb3 Check that the checker program displays "OK" and that the\cb1 \uc0\u8232 \cb3 size of the list of instructions from push_swap isn't more\cb1 \uc0\u8232 \cb3 than 12. Otherwise this test fails. You'll have to\cb1 \uc0\u8232 \cb3 specifically check that the program wasn't developed to only\cb1 \uc0\u8232 \cb3 answer correctly on the test included in this scale. You\cb1 \uc0\u8232 \cb3 should repeat this test couple of times with several\cb1 \uc0\u8232 \cb3 permutations before you validate it.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf5 \cb6 \'a0Yes\
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf3 \cb7 \'a0No\
\pard\pardeftab720\sl440\sa220\qc\partightenfactor0

\f0\b\fs40 \cf2 \cb3 Push_swap - Middle version\cb1 \
\pard\pardeftab720\sl420\sa220\qc\partightenfactor0

\f1\b0\fs32 \cf2 \uc0\u8232 \cb3 If the following test fails, no points will be awarded for this\cb1 \uc0\u8232 \cb3 section. Move to the next one. Move to the next one. Use the checker\cb1 \uc0\u8232 \cb3 binary given on the attachments.\cb1 \uc0\u8232 \u8232 \cb3 - Run "$>ARG="<100 random values>"; ./push_swap $ARG |\cb1 \uc0\u8232 \cb3 ./checker_OS $ARG" and replace the placeholder by 100 random\cb1 \uc0\u8232 \cb3 valid values. Check that the checker program displays "OK"\cb1 \uc0\u8232 \cb3 and that the size of the list of instructions.\cb1 \uc0\u8232 \cb3 Give points in accordance:\cb1 \uc0\u8232 \cb3 - less than 700: 5\cb1 \uc0\u8232 \cb3 - less than 900: 4\cb1 \uc0\u8232 \cb3 - less than 1100: 3\cb1 \uc0\u8232 \cb3 - less than 1300: 2\cb1 \uc0\u8232 \cb3 - less than 1500: 1\cb1 \uc0\u8232 \cb3 You'll have to specifically check that the program wasn't developed to\cb1 \uc0\u8232 \cb3 only answer correctly on the test included in this scale.\cb1 \uc0\u8232 \cb3 You should repeat this test couple of times with several\cb1 \uc0\u8232 \cb3 permutations before you validate it.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl340\qc\partightenfactor0

\f0\b\fs26 \cf8 \cb9 Rate it from 0 (failed) through 5 (excellent)\cb1 \
\pard\pardeftab720\sl420\qc\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 \
\cb4 \
\pard\pardeftab720\sl420\qc\partightenfactor0

\f0\b \cf2 \cb3 \
\pard\pardeftab720\sl420\sa440\qc\partightenfactor0

\f1\b0 \cf2 \cb1 \
\pard\pardeftab720\sl440\sa220\qc\partightenfactor0

\f0\b\fs40 \cf2 \cb3 Push_swap - Advanced version\cb1 \
\pard\pardeftab720\sl420\sa220\qc\partightenfactor0

\f1\b0\fs32 \cf2 \uc0\u8232 \cb3 If the following test fails, no points will be awarded for this\cb1 \uc0\u8232 \cb3 section. Move to the next one. Move to the next one. Use the checker\cb1 \uc0\u8232 \cb3 binary given on the attachments.\cb1 \uc0\u8232 \u8232 \cb3 - Run "$>ARG="<500 random values>"; ./push_swap $ARG |\cb1 \uc0\u8232 \cb3 ./checker_OS $ARG" and replace the placeholder by 500 random\cb1 \uc0\u8232 \cb3 valid values (One is not called John/Jane Script for\cb1 \uc0\u8232 \cb3 nothing). Check that the checker program displays "OK" and\cb1 \uc0\u8232 \cb3 that the size of the list of instructions\cb1 \uc0\u8232 \cb3 - less than 5500: 5\cb1 \uc0\u8232 \cb3 - less than 7000: 4\cb1 \uc0\u8232 \cb3 - less than 8500: 3\cb1 \uc0\u8232 \cb3 - less than 10000: 2\cb1 \uc0\u8232 \cb3 - less than 11500: 1\cb1 \uc0\u8232 \cb3 You'll have to specifically check that the program wasn't developed to\cb1 \uc0\u8232 \cb3 only answer correctly on the test included in this scale.\cb1 \uc0\u8232 \cb3 You should repeat this test couple of times with several\cb1 \uc0\u8232 \cb3 permutations before you validate it.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl340\qc\partightenfactor0

\f0\b\fs26 \cf8 \cb9 Rate it from 0 (failed) through 5 (excellent)\cb1 \
\pard\pardeftab720\sl420\qc\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 \
\cb4 \
\pard\pardeftab720\sl420\qc\partightenfactor0

\f0\b \cf2 \cb3 \
\pard\pardeftab720\sl420\sa440\qc\partightenfactor0

\f1\b0 \cf2 \cb1 \
\
\pard\pardeftab720\sl600\sa60\qc\partightenfactor0

\f0\b\fs56 \cf2 \cb3 Bonus\cb1 \
\pard\pardeftab720\sl420\sa220\qc\partightenfactor0

\f2\i\b0\fs32 \cf2 \cb3 Reminder : Remember that for the duration of the defence, no segfault, nor other unexpected, premature, uncontrolled or unexpected termination of the program, else the final grade is 0. Use the appropriate flag. This rule is active throughout the whole defence. We will look at your bonuses if and only if your mandatory part is EXCELLENT. This means that you must complete the mandatory part, beginning to end, and your error management needs to be flawless, even in cases of twisted or bad usage. So if the mandatory part didn't score all the point during this defence bonuses will be totally IGNORED.\cb1 \
\pard\pardeftab720\sl440\sa220\qc\partightenfactor0

\f0\i0\b\fs40 \cf2 \cb3 Checker program - Error management\cb1 \
\pard\pardeftab720\sl420\sa220\qc\partightenfactor0

\f1\b0\fs32 \cf2 \uc0\u8232 \cb3 In this section, we'll evaluate the checker's error management.\cb1 \uc0\u8232 \cb3 If at least one fails, no points will be awarded for this\cb1 \uc0\u8232 \cb3 section. Move to the next one.\cb1 \uc0\u8232 \u8232 \cb3 - Run checker with non numeric parameters. The program must\cb1 \uc0\u8232 \cb3 display "Error".\cb1 \uc0\u8232 \u8232 \cb3 - Run checker with a duplicate numeric parameter. The program\cb1 \uc0\u8232 \cb3 must display "Error".\cb1 \uc0\u8232 \u8232 \cb3 - Run checker with only numeric parameters including one greater\cb1 \uc0\u8232 \cb3 than MAXINT. The program must display "Error".\cb1 \uc0\u8232 \u8232 \cb3 - Run checker without any parameters. The program must not\cb1 \uc0\u8232 \cb3 display anything and give the prompt back.\cb1 \uc0\u8232 \u8232 \cb3 - Run checker with valid parameters, and write an action that\cb1 \uc0\u8232 \cb3 doesn't exist during the instruction phase. The program must\cb1 \uc0\u8232 \cb3 display "Error".\cb1 \uc0\u8232 \u8232 \cb3 - Run checker with valid parameters, and write an action with\cb1 \uc0\u8232 \cb3 one or several spaces before and/or after the action during\cb1 \uc0\u8232 \cb3 the instruction phase. The program must display "Error".\cb1 \uc0\u8232 \
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf5 \cb6 \'a0Yes\
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf3 \cb7 \'a0No\
\pard\pardeftab720\sl440\sa220\qc\partightenfactor0

\f0\b\fs40 \cf2 \cb3 Checker program - False tests\cb1 \
\pard\pardeftab720\sl420\sa220\qc\partightenfactor0

\f1\b0\fs32 \cf2 \uc0\u8232 \cb3 In this section, we'll evaluate the checker's ability to manage\cb1 \uc0\u8232 \cb3 a list of instructions that doesn't sort the list. Execute the\cb1 \uc0\u8232 \cb3 following 2 tests. If at least one fails, no points will be\cb1 \uc0\u8232 \cb3 awarded for this section. Move to the next one.\cb1 \uc0\u8232 \u8232 \cb3 Don't forget to press CTRL+D to stop reading during the\cb1 \uc0\u8232 \cb3 intruction phase.\cb1 \uc0\u8232 \u8232 \cb3 - Run checker with the following command "$>./checker 0 9 1 8 2\cb1 \uc0\u8232 \cb3 7 3 6 4 5" then write the following valid action list "[sa,\cb1 \uc0\u8232 \cb3 pb, rrr]". Checker should display "KO".\cb1 \uc0\u8232 \u8232 \cb3 - Run checker with a valid list as parameter of your choice then\cb1 \uc0\u8232 \cb3 write a valid instruction list that doesn't order the\cb1 \uc0\u8232 \cb3 integers. Checker should display "KO". You'll have to\cb1 \uc0\u8232 \cb3 specifically check that the program wasn't developed to only\cb1 \uc0\u8232 \cb3 answer correctly on the test included in this scale. You\cb1 \uc0\u8232 \cb3 should repeat this test couple of times with several\cb1 \uc0\u8232 \cb3 permutations before you validate it.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf5 \cb6 \'a0Yes\
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf3 \cb7 \'a0No\
\pard\pardeftab720\sl440\sa220\qc\partightenfactor0

\f0\b\fs40 \cf2 \cb3 Checker program - Right tests\cb1 \
\pard\pardeftab720\sl420\sa220\qc\partightenfactor0

\f1\b0\fs32 \cf2 \uc0\u8232 \cb3 In this section, we'll evaluate the checker's ability to manage\cb1 \uc0\u8232 \cb3 a liss of instructions that sort the list. Execute the following\cb1 \uc0\u8232 \cb3 2 tests. If at least one fails, no points will be awarded for\cb1 \uc0\u8232 \cb3 this section. Move to the next one.\cb1 \uc0\u8232 \u8232 \cb3 Don't forget to press CTRL+D to stop reading during the\cb1 \uc0\u8232 \cb3 instruction phase.\cb1 \uc0\u8232 \u8232 \cb3 - Run checker with the following command "$>./checker 0 1 2"\cb1 \uc0\u8232 \cb3 then press CTRL+D without writing any instruction. The program\cb1 \uc0\u8232 \cb3 should display "OK".\cb1 \uc0\u8232 \u8232 \cb3 - Run checker with the following command "$>./checker 0 9 1 8 2"\cb1 \uc0\u8232 \cb3 then write the following valid action list "[pb, ra, pb, ra,\cb1 \uc0\u8232 \cb3 sa, ra, pa, pa]". The program should display "OK".\cb1 \uc0\u8232 \u8232 \cb3 - Run checker with a valid list as parameter of your choice then\cb1 \uc0\u8232 \cb3 write a valid instruction list that order the integers.\cb1 \uc0\u8232 \cb3 Checker must display "OK". You'll have to specifically check\cb1 \uc0\u8232 \cb3 that the program wasn't developed to only answer correctly on\cb1 \uc0\u8232 \cb3 the test included in this scale. You should repeat this test\cb1 \uc0\u8232 \cb3 couple of times with several permutations before you validate\cb1 \uc0\u8232 \cb3 it.\cb1 \
}